
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800200  00800200  00000c84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bed  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000025e  00000000  00000000  00001a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bbe  00000000  00000000  00001cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  000028a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060e  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f0  00000000  00000000  00003246  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00003736  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c1       	rjmp	.+678    	; 0x2bc <__vector_5>
  16:	00 00       	nop
  18:	2c c1       	rjmp	.+600    	; 0x272 <__vector_6>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	ff c1       	rjmp	.+1022   	; 0x4cc <__vector_51>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 35       	cpi	r26, 0x52	; 82
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	f9 d3       	rcall	.+2034   	; 0x8f8 <main>
 106:	82 c5       	rjmp	.+2820   	; 0xc0c <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <buzzer_pin_config>:
	PORTA = 0x0A;
}

void stop (void)
{
	PORTA = 0x00;
 10a:	3b 9a       	sbi	0x07, 3	; 7
 10c:	43 98       	cbi	0x08, 3	; 8
 10e:	08 95       	ret

00000110 <motion_pin_config>:
 110:	81 b1       	in	r24, 0x01	; 1
 112:	8f 60       	ori	r24, 0x0F	; 15
 114:	81 b9       	out	0x01, r24	; 1
 116:	82 b1       	in	r24, 0x02	; 2
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	82 b9       	out	0x02, r24	; 2
 11c:	ea e0       	ldi	r30, 0x0A	; 10
 11e:	f1 e0       	ldi	r31, 0x01	; 1
 120:	80 81       	ld	r24, Z
 122:	88 61       	ori	r24, 0x18	; 24
 124:	80 83       	st	Z, r24
 126:	eb e0       	ldi	r30, 0x0B	; 11
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	80 81       	ld	r24, Z
 12c:	88 61       	ori	r24, 0x18	; 24
 12e:	80 83       	st	Z, r24
 130:	08 95       	ret

00000132 <left_encoder_pin_config>:
 132:	6c 98       	cbi	0x0d, 4	; 13
 134:	74 9a       	sbi	0x0e, 4	; 14
 136:	08 95       	ret

00000138 <right_encoder_pin_config>:
 138:	6d 98       	cbi	0x0d, 5	; 13
 13a:	75 9a       	sbi	0x0e, 5	; 14
 13c:	08 95       	ret

0000013e <adc_pin_config>:
 13e:	10 ba       	out	0x10, r1	; 16
 140:	11 ba       	out	0x11, r1	; 17
 142:	10 92 07 01 	sts	0x0107, r1
 146:	10 92 08 01 	sts	0x0108, r1
 14a:	08 95       	ret

0000014c <servo1_pin_config>:
 14c:	25 9a       	sbi	0x04, 5	; 4
 14e:	2d 9a       	sbi	0x05, 5	; 5
 150:	08 95       	ret

00000152 <servo2_pin_config>:
 152:	26 9a       	sbi	0x04, 6	; 4
 154:	2e 9a       	sbi	0x05, 6	; 5
 156:	08 95       	ret

00000158 <servo3_pin_config>:
 158:	27 9a       	sbi	0x04, 7	; 4
 15a:	2f 9a       	sbi	0x05, 7	; 5
 15c:	08 95       	ret

0000015e <LED_bargraph_config>:
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	80 93 04 01 	sts	0x0104, r24
 164:	10 92 05 01 	sts	0x0105, r1
 168:	08 95       	ret

0000016a <spi_pin_config>:
 16a:	84 b1       	in	r24, 0x04	; 4
 16c:	87 60       	ori	r24, 0x07	; 7
 16e:	84 b9       	out	0x04, r24	; 4
 170:	85 b1       	in	r24, 0x05	; 5
 172:	87 60       	ori	r24, 0x07	; 7
 174:	85 b9       	out	0x05, r24	; 5
 176:	08 95       	ret

00000178 <port_init>:
 178:	cb df       	rcall	.-106    	; 0x110 <motion_pin_config>
 17a:	c7 df       	rcall	.-114    	; 0x10a <buzzer_pin_config>
 17c:	da df       	rcall	.-76     	; 0x132 <left_encoder_pin_config>
 17e:	dc df       	rcall	.-72     	; 0x138 <right_encoder_pin_config>
 180:	de df       	rcall	.-68     	; 0x13e <adc_pin_config>
 182:	e4 df       	rcall	.-56     	; 0x14c <servo1_pin_config>
 184:	e6 df       	rcall	.-52     	; 0x152 <servo2_pin_config>
 186:	e8 df       	rcall	.-48     	; 0x158 <servo3_pin_config>
 188:	ea df       	rcall	.-44     	; 0x15e <LED_bargraph_config>
 18a:	ef cf       	rjmp	.-34     	; 0x16a <spi_pin_config>
 18c:	08 95       	ret

0000018e <uart2_init>:
 18e:	e1 ed       	ldi	r30, 0xD1	; 209
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	10 82       	st	Z, r1
 194:	10 92 d0 00 	sts	0x00D0, r1
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	80 93 d2 00 	sts	0x00D2, r24
 19e:	8f e5       	ldi	r24, 0x5F	; 95
 1a0:	80 93 d4 00 	sts	0x00D4, r24
 1a4:	10 92 d5 00 	sts	0x00D5, r1
 1a8:	88 e9       	ldi	r24, 0x98	; 152
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <adc_init>:
 1ae:	ea e7       	ldi	r30, 0x7A	; 122
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	10 82       	st	Z, r1
 1b4:	10 92 7b 00 	sts	0x007B, r1
 1b8:	80 e2       	ldi	r24, 0x20	; 32
 1ba:	80 93 7c 00 	sts	0x007C, r24
 1be:	80 e8       	ldi	r24, 0x80	; 128
 1c0:	80 bf       	out	0x30, r24	; 48
 1c2:	86 e8       	ldi	r24, 0x86	; 134
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

000001c8 <timer5_init>:
 1c8:	e1 e2       	ldi	r30, 0x21	; 33
 1ca:	f1 e0       	ldi	r31, 0x01	; 1
 1cc:	10 82       	st	Z, r1
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	80 93 25 01 	sts	0x0125, r24
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	90 93 24 01 	sts	0x0124, r25
 1da:	10 92 29 01 	sts	0x0129, r1
 1de:	80 93 28 01 	sts	0x0128, r24
 1e2:	10 92 2b 01 	sts	0x012B, r1
 1e6:	80 93 2a 01 	sts	0x012A, r24
 1ea:	10 92 2d 01 	sts	0x012D, r1
 1ee:	80 93 2c 01 	sts	0x012C, r24
 1f2:	89 ea       	ldi	r24, 0xA9	; 169
 1f4:	80 93 20 01 	sts	0x0120, r24
 1f8:	8b e0       	ldi	r24, 0x0B	; 11
 1fa:	80 83       	st	Z, r24
 1fc:	08 95       	ret

000001fe <timer1_init>:
 1fe:	e1 e8       	ldi	r30, 0x81	; 129
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	10 82       	st	Z, r1
 204:	8c ef       	ldi	r24, 0xFC	; 252
 206:	80 93 85 00 	sts	0x0085, r24
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 84 00 	sts	0x0084, r24
 210:	93 e0       	ldi	r25, 0x03	; 3
 212:	90 93 89 00 	sts	0x0089, r25
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	80 93 88 00 	sts	0x0088, r24
 21c:	90 93 8b 00 	sts	0x008B, r25
 220:	80 93 8a 00 	sts	0x008A, r24
 224:	90 93 8d 00 	sts	0x008D, r25
 228:	80 93 8c 00 	sts	0x008C, r24
 22c:	90 93 87 00 	sts	0x0087, r25
 230:	80 93 86 00 	sts	0x0086, r24
 234:	8b ea       	ldi	r24, 0xAB	; 171
 236:	80 93 80 00 	sts	0x0080, r24
 23a:	10 92 82 00 	sts	0x0082, r1
 23e:	8c e0       	ldi	r24, 0x0C	; 12
 240:	80 83       	st	Z, r24
 242:	08 95       	ret

00000244 <left_position_encoder_interrupt_init>:
 244:	f8 94       	cli
 246:	ea e6       	ldi	r30, 0x6A	; 106
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	80 83       	st	Z, r24
 250:	ec 9a       	sbi	0x1d, 4	; 29
 252:	78 94       	sei
 254:	08 95       	ret

00000256 <right_position_encoder_interrupt_init>:
 256:	f8 94       	cli
 258:	ea e6       	ldi	r30, 0x6A	; 106
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	88 60       	ori	r24, 0x08	; 8
 260:	80 83       	st	Z, r24
 262:	ed 9a       	sbi	0x1d, 5	; 29
 264:	78 94       	sei
 266:	08 95       	ret

00000268 <spi_init>:
 268:	83 e5       	ldi	r24, 0x53	; 83
 26a:	8c bd       	out	0x2c, r24	; 44
 26c:	1d bc       	out	0x2d, r1	; 45
 26e:	1e bc       	out	0x2e, r1	; 46
 270:	08 95       	ret

00000272 <__vector_6>:
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	80 91 00 02 	lds	r24, 0x0200
 288:	90 91 01 02 	lds	r25, 0x0201
 28c:	a0 91 02 02 	lds	r26, 0x0202
 290:	b0 91 03 02 	lds	r27, 0x0203
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	a1 1d       	adc	r26, r1
 298:	b1 1d       	adc	r27, r1
 29a:	80 93 00 02 	sts	0x0200, r24
 29e:	90 93 01 02 	sts	0x0201, r25
 2a2:	a0 93 02 02 	sts	0x0202, r26
 2a6:	b0 93 03 02 	sts	0x0203, r27
 2aa:	bf 91       	pop	r27
 2ac:	af 91       	pop	r26
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_5>:
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
 2ca:	af 93       	push	r26
 2cc:	bf 93       	push	r27
 2ce:	80 91 04 02 	lds	r24, 0x0204
 2d2:	90 91 05 02 	lds	r25, 0x0205
 2d6:	a0 91 06 02 	lds	r26, 0x0206
 2da:	b0 91 07 02 	lds	r27, 0x0207
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	a1 1d       	adc	r26, r1
 2e2:	b1 1d       	adc	r27, r1
 2e4:	80 93 04 02 	sts	0x0204, r24
 2e8:	90 93 05 02 	sts	0x0205, r25
 2ec:	a0 93 06 02 	sts	0x0206, r26
 2f0:	b0 93 07 02 	sts	0x0207, r27
 2f4:	bf 91       	pop	r27
 2f6:	af 91       	pop	r26
 2f8:	9f 91       	pop	r25
 2fa:	8f 91       	pop	r24
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <init_devices>:
 306:	f8 94       	cli
 308:	37 df       	rcall	.-402    	; 0x178 <port_init>
 30a:	41 df       	rcall	.-382    	; 0x18e <uart2_init>
 30c:	50 df       	rcall	.-352    	; 0x1ae <adc_init>
 30e:	5c df       	rcall	.-328    	; 0x1c8 <timer5_init>
 310:	99 df       	rcall	.-206    	; 0x244 <left_position_encoder_interrupt_init>
 312:	a1 df       	rcall	.-190    	; 0x256 <right_position_encoder_interrupt_init>
 314:	74 df       	rcall	.-280    	; 0x1fe <timer1_init>
 316:	a8 df       	rcall	.-176    	; 0x268 <spi_init>
 318:	78 94       	sei
 31a:	08 95       	ret

0000031c <ADC_Conversion>:
 31c:	88 30       	cpi	r24, 0x08	; 8
 31e:	18 f0       	brcs	.+6      	; 0x326 <ADC_Conversion+0xa>
 320:	98 e0       	ldi	r25, 0x08	; 8
 322:	90 93 7b 00 	sts	0x007B, r25
 326:	87 70       	andi	r24, 0x07	; 7
 328:	80 62       	ori	r24, 0x20	; 32
 32a:	80 93 7c 00 	sts	0x007C, r24
 32e:	10 92 4a 02 	sts	0x024A, r1
 332:	ea e7       	ldi	r30, 0x7A	; 122
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	80 64       	ori	r24, 0x40	; 64
 33a:	80 83       	st	Z, r24
 33c:	80 81       	ld	r24, Z
 33e:	84 ff       	sbrs	r24, 4
 340:	fd cf       	rjmp	.-6      	; 0x33c <ADC_Conversion+0x20>
 342:	80 91 79 00 	lds	r24, 0x0079
 346:	ea e7       	ldi	r30, 0x7A	; 122
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	90 81       	ld	r25, Z
 34c:	90 61       	ori	r25, 0x10	; 16
 34e:	90 83       	st	Z, r25
 350:	10 92 7b 00 	sts	0x007B, r1
 354:	08 95       	ret

00000356 <velocity>:
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	39 f4       	brne	.+14     	; 0x368 <velocity+0x12>
 35a:	96 e0       	ldi	r25, 0x06	; 6
 35c:	92 b9       	out	0x02, r25	; 2
 35e:	80 93 28 01 	sts	0x0128, r24
 362:	60 93 2a 01 	sts	0x012A, r22
 366:	08 95       	ret
 368:	42 30       	cpi	r20, 0x02	; 2
 36a:	39 f4       	brne	.+14     	; 0x37a <velocity+0x24>
 36c:	99 e0       	ldi	r25, 0x09	; 9
 36e:	92 b9       	out	0x02, r25	; 2
 370:	80 93 28 01 	sts	0x0128, r24
 374:	60 93 2a 01 	sts	0x012A, r22
 378:	08 95       	ret
 37a:	12 b8       	out	0x02, r1	; 2
 37c:	08 95       	ret

0000037e <motor_enable>:
 37e:	eb e0       	ldi	r30, 0x0B	; 11
 380:	f1 e0       	ldi	r31, 0x01	; 1
 382:	80 81       	ld	r24, Z
 384:	82 61       	ori	r24, 0x12	; 18
 386:	80 83       	st	Z, r24
 388:	08 95       	ret

0000038a <buzzer_on>:
 38a:	43 9a       	sbi	0x08, 3	; 8
 38c:	08 95       	ret

0000038e <buzzer_off>:
 38e:	43 98       	cbi	0x08, 3	; 8
 390:	08 95       	ret

00000392 <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
 392:	bc 01       	movw	r22, r24
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	ab d3       	rcall	.+1878   	; 0xaf0 <__floatunsisf>
 39a:	25 ee       	ldi	r18, 0xE5	; 229
 39c:	30 ed       	ldi	r19, 0xD0	; 208
 39e:	4a ea       	ldi	r20, 0xAA	; 170
 3a0:	50 e4       	ldi	r21, 0x40	; 64
 3a2:	12 d3       	rcall	.+1572   	; 0x9c8 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
 3a4:	79 d3       	rcall	.+1778   	; 0xa98 <__fixunssfsi>
 3a6:	ab 01       	movw	r20, r22
 3a8:	bc 01       	movw	r22, r24
	
	ShaftCountRight = 0;
 3aa:	10 92 00 02 	sts	0x0200, r1
 3ae:	10 92 01 02 	sts	0x0201, r1
 3b2:	10 92 02 02 	sts	0x0202, r1
 3b6:	10 92 03 02 	sts	0x0203, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
 3ba:	80 91 00 02 	lds	r24, 0x0200
 3be:	90 91 01 02 	lds	r25, 0x0201
 3c2:	a0 91 02 02 	lds	r26, 0x0202
 3c6:	b0 91 03 02 	lds	r27, 0x0203
 3ca:	48 17       	cp	r20, r24
 3cc:	59 07       	cpc	r21, r25
 3ce:	6a 07       	cpc	r22, r26
 3d0:	7b 07       	cpc	r23, r27
 3d2:	98 f7       	brcc	.-26     	; 0x3ba <linear_distance_mm+0x28>
	PORTA = 0x0A;
}

void stop (void)
{
	PORTA = 0x00;
 3d4:	12 b8       	out	0x02, r1	; 2
 3d6:	08 95       	ret

000003d8 <forward_mm>:
}

void forward (void)
{
	//PORTA &= 0xF0;
	PORTA = 0x06;
 3d8:	26 e0       	ldi	r18, 0x06	; 6
 3da:	22 b9       	out	0x02, r18	; 2
}

void forward_mm(unsigned int DistanceInMM)
{
	forward();
	linear_distance_mm(DistanceInMM);
 3dc:	da cf       	rjmp	.-76     	; 0x392 <linear_distance_mm>
 3de:	08 95       	ret

000003e0 <back_mm>:
}

void back (void)
{
	//PORTA &= 0xF0;
	PORTA = 0x09;
 3e0:	29 e0       	ldi	r18, 0x09	; 9
 3e2:	22 b9       	out	0x02, r18	; 2
}

void back_mm(unsigned int DistanceInMM)
{
	back();
	linear_distance_mm(DistanceInMM);
 3e4:	d6 cf       	rjmp	.-84     	; 0x392 <linear_distance_mm>
 3e6:	08 95       	ret

000003e8 <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
 3e8:	10 92 89 00 	sts	0x0089, r1

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
 3ec:	68 2f       	mov	r22, r24
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	7d d3       	rcall	.+1786   	; 0xaf0 <__floatunsisf>
 3f6:	2b e7       	ldi	r18, 0x7B	; 123
 3f8:	34 e1       	ldi	r19, 0x14	; 20
 3fa:	4e ee       	ldi	r20, 0xEE	; 238
 3fc:	5f e3       	ldi	r21, 0x3F	; 63
 3fe:	e4 d2       	rcall	.+1480   	; 0x9c8 <__divsf3>
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	4c e0       	ldi	r20, 0x0C	; 12
 406:	52 e4       	ldi	r21, 0x42	; 66
 408:	7b d2       	rcall	.+1270   	; 0x900 <__addsf3>
	OCR1AH = 0x00;
	OCR1AL = (unsigned char) PositionPanServo;
 40a:	46 d3       	rcall	.+1676   	; 0xa98 <__fixunssfsi>
 40c:	60 93 88 00 	sts	0x0088, r22
 410:	08 95       	ret

00000412 <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
 412:	10 92 8b 00 	sts	0x008B, r1

//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 416:	68 2f       	mov	r22, r24
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	68 d3       	rcall	.+1744   	; 0xaf0 <__floatunsisf>
 420:	2b e7       	ldi	r18, 0x7B	; 123
 422:	34 e1       	ldi	r19, 0x14	; 20
 424:	4e ee       	ldi	r20, 0xEE	; 238
 426:	5f e3       	ldi	r21, 0x3F	; 63
 428:	cf d2       	rcall	.+1438   	; 0x9c8 <__divsf3>
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	4c e0       	ldi	r20, 0x0C	; 12
 430:	52 e4       	ldi	r21, 0x42	; 66
 432:	66 d2       	rcall	.+1228   	; 0x900 <__addsf3>
	OCR1BH = 0x00;
	OCR1BL = (unsigned char) PositionTiltServo;
 434:	31 d3       	rcall	.+1634   	; 0xa98 <__fixunssfsi>
 436:	60 93 8a 00 	sts	0x008A, r22
 43a:	08 95       	ret

0000043c <servo_3>:
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
	OCR1CH = 0x00;
 43c:	10 92 8d 00 	sts	0x008D, r1

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
	float PositionServo = 0;
	PositionServo = ((float)degrees / 1.86) + 35.0;
 440:	68 2f       	mov	r22, r24
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	53 d3       	rcall	.+1702   	; 0xaf0 <__floatunsisf>
 44a:	2b e7       	ldi	r18, 0x7B	; 123
 44c:	34 e1       	ldi	r19, 0x14	; 20
 44e:	4e ee       	ldi	r20, 0xEE	; 238
 450:	5f e3       	ldi	r21, 0x3F	; 63
 452:	ba d2       	rcall	.+1396   	; 0x9c8 <__divsf3>
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	4c e0       	ldi	r20, 0x0C	; 12
 45a:	52 e4       	ldi	r21, 0x42	; 66
 45c:	51 d2       	rcall	.+1186   	; 0x900 <__addsf3>
	OCR1CH = 0x00;
	OCR1CL = (unsigned char) PositionServo;
 45e:	1c d3       	rcall	.+1592   	; 0xa98 <__fixunssfsi>
 460:	60 93 8c 00 	sts	0x008C, r22
 464:	08 95       	ret

00000466 <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
	OCR1AH = 0x03;
 466:	83 e0       	ldi	r24, 0x03	; 3
 468:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0xFF; //Servo 1 off
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	80 93 88 00 	sts	0x0088, r24
 472:	08 95       	ret

00000474 <servo_2_free>:
}

void servo_2_free (void) //makes servo 2 free rotating
{
	OCR1BH = 0x03;
 474:	83 e0       	ldi	r24, 0x03	; 3
 476:	80 93 8b 00 	sts	0x008B, r24
	OCR1BL = 0xFF; //Servo 2 off
 47a:	8f ef       	ldi	r24, 0xFF	; 255
 47c:	80 93 8a 00 	sts	0x008A, r24
 480:	08 95       	ret

00000482 <servo_3_free>:
}

void servo_3_free (void) //makes servo 3 free rotating
{
	OCR1CH = 0x03;
 482:	83 e0       	ldi	r24, 0x03	; 3
 484:	80 93 8d 00 	sts	0x008D, r24
	OCR1CL = 0xFF; //Servo 3 off
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	80 93 8c 00 	sts	0x008C, r24
 48e:	08 95       	ret

00000490 <LED_bargraph_on>:
}

void LED_bargraph_on (unsigned char data)
{
	PORTJ |= data;
 490:	e5 e0       	ldi	r30, 0x05	; 5
 492:	f1 e0       	ldi	r31, 0x01	; 1
 494:	90 81       	ld	r25, Z
 496:	89 2b       	or	r24, r25
 498:	80 83       	st	Z, r24
 49a:	08 95       	ret

0000049c <LED_bargraph_off>:
}

void LED_bargraph_off (unsigned char data)
{
	PORTJ &= data;
 49c:	e5 e0       	ldi	r30, 0x05	; 5
 49e:	f1 e0       	ldi	r31, 0x01	; 1
 4a0:	90 81       	ld	r25, Z
 4a2:	89 23       	and	r24, r25
 4a4:	80 83       	st	Z, r24
 4a6:	08 95       	ret

000004a8 <spi_master_tx_and_rx>:
//-------------------------------------------------------------------------------
unsigned char spi_master_tx_and_rx (unsigned char data)
{
	unsigned char rx_data = 0;

	PORTB = PORTB & 0xFE;        // make SS pin low
 4a8:	28 98       	cbi	0x05, 0	; 5
	SPDR = data;
 4aa:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));  //wait for data transmission to complete
 4ac:	0d b4       	in	r0, 0x2d	; 45
 4ae:	07 fe       	sbrs	r0, 7
 4b0:	fd cf       	rjmp	.-6      	; 0x4ac <spi_master_tx_and_rx+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b2:	86 e6       	ldi	r24, 0x66	; 102
 4b4:	9e e0       	ldi	r25, 0x0E	; 14
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <spi_master_tx_and_rx+0xe>
 4ba:	00 00       	nop

	_delay_ms(1);                //time for ADC conversion in the slave microcontroller
	
	SPDR = 0x50;                 // send dummy byte to read back data from the slave microcontroller
 4bc:	80 e5       	ldi	r24, 0x50	; 80
 4be:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));  //wait for data reception to complete
 4c0:	0d b4       	in	r0, 0x2d	; 45
 4c2:	07 fe       	sbrs	r0, 7
 4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <spi_master_tx_and_rx+0x18>
	rx_data = SPDR;
 4c6:	8e b5       	in	r24, 0x2e	; 46
	PORTB = PORTB | 0x01;        // make SS high
 4c8:	28 9a       	sbi	0x05, 0	; 5
	return rx_data;
}
 4ca:	08 95       	ret

000004cc <__vector_51>:



//SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
ISR(USART2_RX_vect)
{
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	0b b6       	in	r0, 0x3b	; 59
 4d8:	0f 92       	push	r0
 4da:	2f 93       	push	r18
 4dc:	3f 93       	push	r19
 4de:	8f 93       	push	r24
 4e0:	9f 93       	push	r25
 4e2:	af 93       	push	r26
 4e4:	bf 93       	push	r27
 4e6:	ef 93       	push	r30
 4e8:	ff 93       	push	r31
	rec_data = UDR2; 				//making copy of data from UDR2 in 'data' variable
 4ea:	90 91 d6 00 	lds	r25, 0x00D6
 4ee:	90 93 49 02 	sts	0x0249, r25

	while(!(UCSR2A && (1<<RXC2)));	// wait till data byte is received
 4f2:	e0 ed       	ldi	r30, 0xD0	; 208
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	88 23       	and	r24, r24
 4fa:	e9 f3       	breq	.-6      	; 0x4f6 <__vector_51+0x2a>
	
	if (data_packet_received == 0) 
 4fc:	80 91 13 02 	lds	r24, 0x0213
 500:	81 11       	cpse	r24, r1
 502:	46 c0       	rjmp	.+140    	; 0x590 <__vector_51+0xc4>
	{
		if (rec_data == '\n' )			// '\n' decimal value is 10
 504:	9a 30       	cpi	r25, 0x0A	; 10
 506:	71 f4       	brne	.+28     	; 0x524 <__vector_51+0x58>
		{
			 //state = _second_last_byte 
			uart_data_buff[i] = rec_data;
 508:	80 91 15 02 	lds	r24, 0x0215
 50c:	e8 2f       	mov	r30, r24
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	e0 5d       	subi	r30, 0xD0	; 208
 512:	fd 4f       	sbci	r31, 0xFD	; 253
 514:	90 83       	st	Z, r25
			i++;
 516:	8f 5f       	subi	r24, 0xFF	; 255
 518:	80 93 15 02 	sts	0x0215, r24
			end_char_rec = 1;
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	80 93 16 02 	sts	0x0216, r24
 522:	36 c0       	rjmp	.+108    	; 0x590 <__vector_51+0xc4>
		//	UDR2 = rec_data;
		}

		else 
		{
			if((end_char_rec == 1) && (rec_data == '\r'))		//'\r' indicates end of transmission. It should come after '\n'
 524:	80 91 16 02 	lds	r24, 0x0216
 528:	81 30       	cpi	r24, 0x01	; 1
 52a:	41 f5       	brne	.+80     	; 0x57c <__vector_51+0xb0>
 52c:	9d 30       	cpi	r25, 0x0D	; 13
 52e:	81 f5       	brne	.+96     	; 0x590 <__vector_51+0xc4>
			{
				uart_data_buff[i] = rec_data;
 530:	20 91 15 02 	lds	r18, 0x0215
 534:	e2 2f       	mov	r30, r18
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	e0 5d       	subi	r30, 0xD0	; 208
 53a:	fd 4f       	sbci	r31, 0xFD	; 253
 53c:	8d e0       	ldi	r24, 0x0D	; 13
 53e:	80 83       	st	Z, r24
				i++;
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	92 0f       	add	r25, r18
 544:	90 93 15 02 	sts	0x0215, r25
				end_char_rec = 2;
 548:	82 e0       	ldi	r24, 0x02	; 2
 54a:	80 93 16 02 	sts	0x0216, r24
				data_packet_received = 1;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	80 93 13 02 	sts	0x0213, r24
				
				for (j = 0;j<i;j++)				// i value is stored in ISR
 554:	10 92 14 02 	sts	0x0214, r1
 558:	99 23       	and	r25, r25
 55a:	d1 f0       	breq	.+52     	; 0x590 <__vector_51+0xc4>
 55c:	a7 e1       	ldi	r26, 0x17	; 23
 55e:	b2 e0       	ldi	r27, 0x02	; 2
 560:	e0 e3       	ldi	r30, 0x30	; 48
 562:	f2 e0       	ldi	r31, 0x02	; 2
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	2f 5c       	subi	r18, 0xCF	; 207
 568:	3d 4f       	sbci	r19, 0xFD	; 253
				{
					copy_packet_data[j] = uart_data_buff[j];
 56a:	80 81       	ld	r24, Z
 56c:	8d 93       	st	X+, r24
					//UDR2 = copy_packet_data[j];
					uart_data_buff[j] = 0;
 56e:	11 92       	st	Z+, r1
				uart_data_buff[i] = rec_data;
				i++;
				end_char_rec = 2;
				data_packet_received = 1;
				
				for (j = 0;j<i;j++)				// i value is stored in ISR
 570:	e2 17       	cp	r30, r18
 572:	f3 07       	cpc	r31, r19
 574:	d1 f7       	brne	.-12     	; 0x56a <__vector_51+0x9e>
 576:	90 93 14 02 	sts	0x0214, r25
 57a:	0a c0       	rjmp	.+20     	; 0x590 <__vector_51+0xc4>
																	// discard the data and check 
			}
		
			else													// store other data bytes
			{
				uart_data_buff[i] = rec_data;
 57c:	80 91 15 02 	lds	r24, 0x0215
 580:	e8 2f       	mov	r30, r24
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	e0 5d       	subi	r30, 0xD0	; 208
 586:	fd 4f       	sbci	r31, 0xFD	; 253
 588:	90 83       	st	Z, r25
				i++;
 58a:	8f 5f       	subi	r24, 0xFF	; 255
 58c:	80 93 15 02 	sts	0x0215, r24
			//	UDR2 = rec_data;
			}
		}
	}	
}	// end of ISR
 590:	ff 91       	pop	r31
 592:	ef 91       	pop	r30
 594:	bf 91       	pop	r27
 596:	af 91       	pop	r26
 598:	9f 91       	pop	r25
 59a:	8f 91       	pop	r24
 59c:	3f 91       	pop	r19
 59e:	2f 91       	pop	r18
 5a0:	0f 90       	pop	r0
 5a2:	0b be       	out	0x3b, r0	; 59
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <send_sensor_data>:

void send_sensor_data(void)
{
	if (device_id == 0x00)
 5ae:	80 91 11 02 	lds	r24, 0x0211
 5b2:	81 11       	cpse	r24, r1
 5b4:	5c c0       	rjmp	.+184    	; 0x66e <send_sensor_data+0xc0>
	{
		if (function_type == 0x00)
 5b6:	80 91 0f 02 	lds	r24, 0x020F
 5ba:	81 11       	cpse	r24, r1
 5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <send_sensor_data+0x18>
		{
			UDR2 = ADC_Conversion(0);		// Battery Voltage
 5be:	ae de       	rcall	.-676    	; 0x31c <ADC_Conversion>
 5c0:	80 93 d6 00 	sts	0x00D6, r24
 5c4:	54 c0       	rjmp	.+168    	; 0x66e <send_sensor_data+0xc0>
		}
		
		else if (function_type == 0x01)
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	21 f4       	brne	.+8      	; 0x5d2 <send_sensor_data+0x24>
		{
			UDR2 = ADC_Conversion(1);		// right WL sensor
 5ca:	a8 de       	rcall	.-688    	; 0x31c <ADC_Conversion>
 5cc:	80 93 d6 00 	sts	0x00D6, r24
 5d0:	4e c0       	rjmp	.+156    	; 0x66e <send_sensor_data+0xc0>
		}
		
		else if (function_type == 0x02)
 5d2:	82 30       	cpi	r24, 0x02	; 2
 5d4:	21 f4       	brne	.+8      	; 0x5de <send_sensor_data+0x30>
		{
			UDR2 = ADC_Conversion(2);		// Center WL sensor
 5d6:	a2 de       	rcall	.-700    	; 0x31c <ADC_Conversion>
 5d8:	80 93 d6 00 	sts	0x00D6, r24
 5dc:	48 c0       	rjmp	.+144    	; 0x66e <send_sensor_data+0xc0>
		}
		
		else if (function_type == 0x03)
 5de:	83 30       	cpi	r24, 0x03	; 3
 5e0:	21 f4       	brne	.+8      	; 0x5ea <send_sensor_data+0x3c>
		{
			UDR2 = ADC_Conversion(3);		// left WL sensor
 5e2:	9c de       	rcall	.-712    	; 0x31c <ADC_Conversion>
 5e4:	80 93 d6 00 	sts	0x00D6, r24
 5e8:	42 c0       	rjmp	.+132    	; 0x66e <send_sensor_data+0xc0>
		}
		
		else if (function_type == 0x04)
 5ea:	84 30       	cpi	r24, 0x04	; 4
 5ec:	21 f4       	brne	.+8      	; 0x5f6 <send_sensor_data+0x48>
		{
			UDR2 = ADC_Conversion(4);		// IR Proximity sensor-1
 5ee:	96 de       	rcall	.-724    	; 0x31c <ADC_Conversion>
 5f0:	80 93 d6 00 	sts	0x00D6, r24
 5f4:	3c c0       	rjmp	.+120    	; 0x66e <send_sensor_data+0xc0>
		}
		
		else if (function_type == 0x05)
 5f6:	85 30       	cpi	r24, 0x05	; 5
 5f8:	21 f4       	brne	.+8      	; 0x602 <send_sensor_data+0x54>
		{
			UDR2 = ADC_Conversion(5);		// IR Proximity sensor-2
 5fa:	90 de       	rcall	.-736    	; 0x31c <ADC_Conversion>
 5fc:	80 93 d6 00 	sts	0x00D6, r24
 600:	36 c0       	rjmp	.+108    	; 0x66e <send_sensor_data+0xc0>
		}
		
		else if (function_type == 0x06)
 602:	86 30       	cpi	r24, 0x06	; 6
 604:	21 f4       	brne	.+8      	; 0x60e <send_sensor_data+0x60>
		{
			UDR2 = ADC_Conversion(6);		// IR Proximity sensor-3
 606:	8a de       	rcall	.-748    	; 0x31c <ADC_Conversion>
 608:	80 93 d6 00 	sts	0x00D6, r24
 60c:	30 c0       	rjmp	.+96     	; 0x66e <send_sensor_data+0xc0>
		}
		
		else if (function_type == 0x07)
 60e:	87 30       	cpi	r24, 0x07	; 7
 610:	21 f4       	brne	.+8      	; 0x61a <send_sensor_data+0x6c>
		{
			UDR2 = ADC_Conversion(7);		// IR Proximity sensor-4
 612:	84 de       	rcall	.-760    	; 0x31c <ADC_Conversion>
 614:	80 93 d6 00 	sts	0x00D6, r24
 618:	2a c0       	rjmp	.+84     	; 0x66e <send_sensor_data+0xc0>
		}
		
		else if (function_type == 0x08)
 61a:	88 30       	cpi	r24, 0x08	; 8
 61c:	21 f4       	brne	.+8      	; 0x626 <send_sensor_data+0x78>
		{
			UDR2 = ADC_Conversion(8);		// IR Proximity sensor-5
 61e:	7e de       	rcall	.-772    	; 0x31c <ADC_Conversion>
 620:	80 93 d6 00 	sts	0x00D6, r24
 624:	24 c0       	rjmp	.+72     	; 0x66e <send_sensor_data+0xc0>
		}
		
		else if (function_type == 0x09)
 626:	89 30       	cpi	r24, 0x09	; 9
 628:	21 f4       	brne	.+8      	; 0x632 <send_sensor_data+0x84>
		{
			UDR2 = ADC_Conversion(9);		// Sharp Sensor-1
 62a:	78 de       	rcall	.-784    	; 0x31c <ADC_Conversion>
 62c:	80 93 d6 00 	sts	0x00D6, r24
 630:	1e c0       	rjmp	.+60     	; 0x66e <send_sensor_data+0xc0>
		}

		else if (function_type == 0x0A)
 632:	8a 30       	cpi	r24, 0x0A	; 10
 634:	21 f4       	brne	.+8      	; 0x63e <send_sensor_data+0x90>
		{
			UDR2 = ADC_Conversion(10);		// Sharp Sensor-2
 636:	72 de       	rcall	.-796    	; 0x31c <ADC_Conversion>
 638:	80 93 d6 00 	sts	0x00D6, r24
 63c:	18 c0       	rjmp	.+48     	; 0x66e <send_sensor_data+0xc0>
		}

		else if (function_type == 0x0B)
 63e:	8b 30       	cpi	r24, 0x0B	; 11
 640:	21 f4       	brne	.+8      	; 0x64a <send_sensor_data+0x9c>
		{
			UDR2 = ADC_Conversion(11);		// Sharp Sensor-3
 642:	6c de       	rcall	.-808    	; 0x31c <ADC_Conversion>
 644:	80 93 d6 00 	sts	0x00D6, r24
 648:	12 c0       	rjmp	.+36     	; 0x66e <send_sensor_data+0xc0>
		}

		else if (function_type == 0x0C)
 64a:	8c 30       	cpi	r24, 0x0C	; 12
 64c:	21 f4       	brne	.+8      	; 0x656 <send_sensor_data+0xa8>
		{
			UDR2 = ADC_Conversion(12);		// Sharp Sensor-4
 64e:	66 de       	rcall	.-820    	; 0x31c <ADC_Conversion>
 650:	80 93 d6 00 	sts	0x00D6, r24
 654:	0c c0       	rjmp	.+24     	; 0x66e <send_sensor_data+0xc0>
		}

		else if (function_type == 0x0D)
 656:	8d 30       	cpi	r24, 0x0D	; 13
 658:	21 f4       	brne	.+8      	; 0x662 <send_sensor_data+0xb4>
		{
			UDR2 = ADC_Conversion(13);		// Sharp Sensor-5
 65a:	60 de       	rcall	.-832    	; 0x31c <ADC_Conversion>
 65c:	80 93 d6 00 	sts	0x00D6, r24
 660:	06 c0       	rjmp	.+12     	; 0x66e <send_sensor_data+0xc0>
		}

		else if (function_type == 0x0E)
 662:	8e 30       	cpi	r24, 0x0E	; 14
 664:	09 f0       	breq	.+2      	; 0x668 <send_sensor_data+0xba>
 666:	38 c0       	rjmp	.+112    	; 0x6d8 <send_sensor_data+0x12a>
		{
			UDR2 = ADC_Conversion(14);		// Connected to servo pod
 668:	59 de       	rcall	.-846    	; 0x31c <ADC_Conversion>
 66a:	80 93 d6 00 	sts	0x00D6, r24
		{
			UDR2 = ADC_Conversion(15);		// Connected to servo pod
		}
	}
	
	if (device_id == 0x01)				// ATmega 8 ADC
 66e:	80 91 11 02 	lds	r24, 0x0211
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	89 f5       	brne	.+98     	; 0x6d8 <send_sensor_data+0x12a>
	{
		if (function_type == 0x00)					// Whiteline sensor 4
 676:	80 91 0f 02 	lds	r24, 0x020F
 67a:	81 11       	cpse	r24, r1
 67c:	04 c0       	rjmp	.+8      	; 0x686 <send_sensor_data+0xd8>
		{
			UDR2 = spi_master_tx_and_rx(0);
 67e:	14 df       	rcall	.-472    	; 0x4a8 <spi_master_tx_and_rx>
 680:	80 93 d6 00 	sts	0x00D6, r24
 684:	08 95       	ret
		} 
		
		else if (function_type == 0x01)				// Whiteline sensor 5
 686:	81 30       	cpi	r24, 0x01	; 1
 688:	21 f4       	brne	.+8      	; 0x692 <send_sensor_data+0xe4>
		{
			UDR2 = spi_master_tx_and_rx(1);
 68a:	0e df       	rcall	.-484    	; 0x4a8 <spi_master_tx_and_rx>
 68c:	80 93 d6 00 	sts	0x00D6, r24
 690:	08 95       	ret
		}
		
		else if (function_type == 0x02)				// Whiteline sensor 6
 692:	82 30       	cpi	r24, 0x02	; 2
 694:	21 f4       	brne	.+8      	; 0x69e <send_sensor_data+0xf0>
		{
			UDR2 = spi_master_tx_and_rx(2);
 696:	08 df       	rcall	.-496    	; 0x4a8 <spi_master_tx_and_rx>
 698:	80 93 d6 00 	sts	0x00D6, r24
 69c:	08 95       	ret
		}
		
		else if (function_type == 0x03)				// Whiteline sensor 7
 69e:	83 30       	cpi	r24, 0x03	; 3
 6a0:	21 f4       	brne	.+8      	; 0x6aa <send_sensor_data+0xfc>
		{
			UDR2 = spi_master_tx_and_rx(3);
 6a2:	02 df       	rcall	.-508    	; 0x4a8 <spi_master_tx_and_rx>
 6a4:	80 93 d6 00 	sts	0x00D6, r24
 6a8:	08 95       	ret
		}
		
		else if (function_type == 0x04)				// Current Sensor
 6aa:	84 30       	cpi	r24, 0x04	; 4
 6ac:	21 f4       	brne	.+8      	; 0x6b6 <send_sensor_data+0x108>
		{
			UDR2 = spi_master_tx_and_rx(4);
 6ae:	fc de       	rcall	.-520    	; 0x4a8 <spi_master_tx_and_rx>
 6b0:	80 93 d6 00 	sts	0x00D6, r24
 6b4:	08 95       	ret
		}
		
		else if (function_type == 0x05)				// IR proximity sensor 6
 6b6:	85 30       	cpi	r24, 0x05	; 5
 6b8:	21 f4       	brne	.+8      	; 0x6c2 <send_sensor_data+0x114>
		{
			UDR2 = spi_master_tx_and_rx(5);
 6ba:	f6 de       	rcall	.-532    	; 0x4a8 <spi_master_tx_and_rx>
 6bc:	80 93 d6 00 	sts	0x00D6, r24
 6c0:	08 95       	ret
		}
		
		else if (function_type == 0x06)				// IR proximity sensor 7
 6c2:	86 30       	cpi	r24, 0x06	; 6
 6c4:	21 f4       	brne	.+8      	; 0x6ce <send_sensor_data+0x120>
		{
			UDR2 = spi_master_tx_and_rx(6);
 6c6:	f0 de       	rcall	.-544    	; 0x4a8 <spi_master_tx_and_rx>
 6c8:	80 93 d6 00 	sts	0x00D6, r24
 6cc:	08 95       	ret
		}
		
		else if (function_type == 0x07)				// IR proximity sensor 8
 6ce:	87 30       	cpi	r24, 0x07	; 7
 6d0:	19 f4       	brne	.+6      	; 0x6d8 <send_sensor_data+0x12a>
		{
			UDR2 = spi_master_tx_and_rx(7);
 6d2:	ea de       	rcall	.-556    	; 0x4a8 <spi_master_tx_and_rx>
 6d4:	80 93 d6 00 	sts	0x00D6, r24
 6d8:	08 95       	ret

000006da <actuate_devices>:
				
}

void actuate_devices(void)
{
	if (device_id == 0x01)				// Buzzer has device id = 1
 6da:	80 91 11 02 	lds	r24, 0x0211
 6de:	81 30       	cpi	r24, 0x01	; 1
 6e0:	51 f4       	brne	.+20     	; 0x6f6 <actuate_devices+0x1c>
	{
		if (function_type == 0x00)
 6e2:	80 91 0f 02 	lds	r24, 0x020F
 6e6:	81 11       	cpse	r24, r1
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <actuate_devices+0x14>
		{
			buzzer_on();
 6ea:	4f de       	rcall	.-866    	; 0x38a <buzzer_on>
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <actuate_devices+0x1c>
		}
		else if (function_type == 0x01)
 6ee:	81 30       	cpi	r24, 0x01	; 1
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <actuate_devices+0x1a>
 6f2:	46 c0       	rjmp	.+140    	; 0x780 <actuate_devices+0xa6>
		{
			buzzer_off();
 6f4:	4c de       	rcall	.-872    	; 0x38e <buzzer_off>
		}
	}
	
	if (device_id == 0x02)				// Motor has device id = 2
 6f6:	80 91 11 02 	lds	r24, 0x0211
 6fa:	82 30       	cpi	r24, 0x02	; 2
 6fc:	59 f5       	brne	.+86     	; 0x754 <actuate_devices+0x7a>
	{
		if (function_type == 0x00)
 6fe:	80 91 0f 02 	lds	r24, 0x020F
 702:	81 11       	cpse	r24, r1
 704:	04 c0       	rjmp	.+8      	; 0x70e <actuate_devices+0x34>
		{
			motor_enable();
 706:	3b de       	rcall	.-906    	; 0x37e <motor_enable>
}

void forward (void)
{
	//PORTA &= 0xF0;
	PORTA = 0x06;
 708:	86 e0       	ldi	r24, 0x06	; 6
 70a:	82 b9       	out	0x02, r24	; 2
 70c:	23 c0       	rjmp	.+70     	; 0x754 <actuate_devices+0x7a>
		if (function_type == 0x00)
		{
			motor_enable();
			forward();
		}
		else if (function_type == 0x01)
 70e:	81 30       	cpi	r24, 0x01	; 1
 710:	21 f4       	brne	.+8      	; 0x71a <actuate_devices+0x40>
		{
			motor_enable();
 712:	35 de       	rcall	.-918    	; 0x37e <motor_enable>
}

void back (void)
{
	//PORTA &= 0xF0;
	PORTA = 0x09;
 714:	89 e0       	ldi	r24, 0x09	; 9
 716:	82 b9       	out	0x02, r24	; 2
 718:	1d c0       	rjmp	.+58     	; 0x754 <actuate_devices+0x7a>
		else if (function_type == 0x01)
		{
			motor_enable();
			back();
		}
		else if (function_type == 0x02)
 71a:	82 30       	cpi	r24, 0x02	; 2
 71c:	21 f4       	brne	.+8      	; 0x726 <actuate_devices+0x4c>
		{
			motor_enable();
 71e:	2f de       	rcall	.-930    	; 0x37e <motor_enable>
}

void right (void)
{
	//PORTA &= 0xF0;
	PORTA = 0x0A;
 720:	8a e0       	ldi	r24, 0x0A	; 10
 722:	82 b9       	out	0x02, r24	; 2
 724:	17 c0       	rjmp	.+46     	; 0x754 <actuate_devices+0x7a>
		else if (function_type == 0x02)
		{
			motor_enable();
			right();
		}
		else if (function_type == 0x03)
 726:	83 30       	cpi	r24, 0x03	; 3
 728:	21 f4       	brne	.+8      	; 0x732 <actuate_devices+0x58>
		{
			motor_enable();
 72a:	29 de       	rcall	.-942    	; 0x37e <motor_enable>
}

void left (void)
{
	//PORTA &= 0xF0;
	PORTA = 0x05;
 72c:	85 e0       	ldi	r24, 0x05	; 5
 72e:	82 b9       	out	0x02, r24	; 2
 730:	11 c0       	rjmp	.+34     	; 0x754 <actuate_devices+0x7a>
		else if (function_type == 0x03)
		{
			motor_enable();
			left();
		}
		else if (function_type == 0x04)
 732:	84 30       	cpi	r24, 0x04	; 4
 734:	19 f4       	brne	.+6      	; 0x73c <actuate_devices+0x62>
		{
			motor_enable();
 736:	23 de       	rcall	.-954    	; 0x37e <motor_enable>
	PORTA = 0x0A;
}

void stop (void)
{
	PORTA = 0x00;
 738:	12 b8       	out	0x02, r1	; 2
 73a:	0c c0       	rjmp	.+24     	; 0x754 <actuate_devices+0x7a>
		else if (function_type == 0x04)
		{
			motor_enable();
			stop();
		}
		else if (function_type == 0x09)
 73c:	89 30       	cpi	r24, 0x09	; 9
 73e:	09 f0       	breq	.+2      	; 0x742 <actuate_devices+0x68>
 740:	47 c0       	rjmp	.+142    	; 0x7d0 <actuate_devices+0xf6>
}

void forward (void)
{
	//PORTA &= 0xF0;
	PORTA = 0x06;
 742:	86 e0       	ldi	r24, 0x06	; 6
 744:	82 b9       	out	0x02, r24	; 2
		}
		else if (function_type == 0x09)
		{
			forward();
			//UDR2 = param_1;
			velocity(param_1,param_2,param_3);
 746:	40 91 08 02 	lds	r20, 0x0208
 74a:	60 91 0a 02 	lds	r22, 0x020A
 74e:	80 91 0c 02 	lds	r24, 0x020C
 752:	01 de       	rcall	.-1022   	; 0x356 <velocity>
			
		}	
	}

	if (device_id == 0x03)				// position encoder has device id = 3
 754:	80 91 11 02 	lds	r24, 0x0211
 758:	83 30       	cpi	r24, 0x03	; 3
 75a:	91 f4       	brne	.+36     	; 0x780 <actuate_devices+0xa6>
	{
		if (function_type == 0x00)
 75c:	80 91 0f 02 	lds	r24, 0x020F
 760:	81 11       	cpse	r24, r1
 762:	49 c0       	rjmp	.+146    	; 0x7f6 <actuate_devices+0x11c>
		{
			forward_mm(param_1);
 764:	80 91 0c 02 	lds	r24, 0x020C
 768:	90 91 0d 02 	lds	r25, 0x020D
 76c:	35 de       	rcall	.-918    	; 0x3d8 <forward_mm>
		}
		
		if (function_type == 0x01 )
 76e:	80 91 0f 02 	lds	r24, 0x020F
 772:	81 30       	cpi	r24, 0x01	; 1
 774:	29 f4       	brne	.+10     	; 0x780 <actuate_devices+0xa6>
		{
			back_mm(param_1);
 776:	80 91 0c 02 	lds	r24, 0x020C
 77a:	90 91 0d 02 	lds	r25, 0x020D
 77e:	30 de       	rcall	.-928    	; 0x3e0 <back_mm>
		}
	}

	if (device_id == 0x04)				// servo has device id = 4
 780:	80 91 11 02 	lds	r24, 0x0211
 784:	84 30       	cpi	r24, 0x04	; 4
 786:	21 f5       	brne	.+72     	; 0x7d0 <actuate_devices+0xf6>
	{
		if (function_type == 0x00)
 788:	80 91 0f 02 	lds	r24, 0x020F
 78c:	81 11       	cpse	r24, r1
 78e:	03 c0       	rjmp	.+6      	; 0x796 <actuate_devices+0xbc>
		{
			servo_1(param_1);
 790:	80 91 0c 02 	lds	r24, 0x020C
 794:	29 de       	rcall	.-942    	; 0x3e8 <servo_1>
		}
		
		if (function_type == 0x01 )
 796:	80 91 0f 02 	lds	r24, 0x020F
 79a:	81 30       	cpi	r24, 0x01	; 1
 79c:	19 f4       	brne	.+6      	; 0x7a4 <actuate_devices+0xca>
		{
			servo_2(param_1);
 79e:	80 91 0c 02 	lds	r24, 0x020C
 7a2:	37 de       	rcall	.-914    	; 0x412 <servo_2>
		}
		
		if (function_type == 0x02 )
 7a4:	80 91 0f 02 	lds	r24, 0x020F
 7a8:	82 30       	cpi	r24, 0x02	; 2
 7aa:	19 f4       	brne	.+6      	; 0x7b2 <actuate_devices+0xd8>
		{
			servo_3(param_1);
 7ac:	80 91 0c 02 	lds	r24, 0x020C
 7b0:	45 de       	rcall	.-886    	; 0x43c <servo_3>
		}

		if (function_type == 0x03 )
 7b2:	80 91 0f 02 	lds	r24, 0x020F
 7b6:	83 30       	cpi	r24, 0x03	; 3
 7b8:	09 f4       	brne	.+2      	; 0x7bc <actuate_devices+0xe2>
		{
			servo_1_free();
 7ba:	55 de       	rcall	.-854    	; 0x466 <servo_1_free>
		}

		if (function_type == 0x04 )
 7bc:	80 91 0f 02 	lds	r24, 0x020F
 7c0:	84 30       	cpi	r24, 0x04	; 4
 7c2:	09 f4       	brne	.+2      	; 0x7c6 <actuate_devices+0xec>
		{
			servo_2_free();
 7c4:	57 de       	rcall	.-850    	; 0x474 <servo_2_free>
		}

		if (function_type == 0x05 )
 7c6:	80 91 0f 02 	lds	r24, 0x020F
 7ca:	85 30       	cpi	r24, 0x05	; 5
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <actuate_devices+0xf6>
		{
			servo_3_free();
 7ce:	59 de       	rcall	.-846    	; 0x482 <servo_3_free>
		}
	}
	if (device_id == 0x05)
 7d0:	80 91 11 02 	lds	r24, 0x0211
 7d4:	85 30       	cpi	r24, 0x05	; 5
 7d6:	91 f4       	brne	.+36     	; 0x7fc <actuate_devices+0x122>
	{
		if (function_type == 0x00)
 7d8:	80 91 0f 02 	lds	r24, 0x020F
 7dc:	81 11       	cpse	r24, r1
 7de:	03 c0       	rjmp	.+6      	; 0x7e6 <actuate_devices+0x10c>
		{
			LED_bargraph_on(param_1);
 7e0:	80 91 0c 02 	lds	r24, 0x020C
 7e4:	55 de       	rcall	.-854    	; 0x490 <LED_bargraph_on>
		}

		if (function_type == 0x01)
 7e6:	80 91 0f 02 	lds	r24, 0x020F
 7ea:	81 30       	cpi	r24, 0x01	; 1
 7ec:	39 f4       	brne	.+14     	; 0x7fc <actuate_devices+0x122>
		{
			LED_bargraph_off(param_1);
 7ee:	80 91 0c 02 	lds	r24, 0x020C
 7f2:	54 ce       	rjmp	.-856    	; 0x49c <LED_bargraph_off>
 7f4:	08 95       	ret
		if (function_type == 0x00)
		{
			forward_mm(param_1);
		}
		
		if (function_type == 0x01 )
 7f6:	81 30       	cpi	r24, 0x01	; 1
 7f8:	09 f4       	brne	.+2      	; 0x7fc <actuate_devices+0x122>
 7fa:	bd cf       	rjmp	.-134    	; 0x776 <actuate_devices+0x9c>
 7fc:	08 95       	ret

000007fe <decode_data>:
	}
}

void decode_data(void)
{
	while (data_copied == 1)
 7fe:	80 91 12 02 	lds	r24, 0x0212
 802:	81 30       	cpi	r24, 0x01	; 1
 804:	09 f0       	breq	.+2      	; 0x808 <decode_data+0xa>
 806:	5b c0       	rjmp	.+182    	; 0x8be <decode_data+0xc0>
	{
		device_id = copy_packet_data[0];
 808:	e7 e1       	ldi	r30, 0x17	; 23
 80a:	f2 e0       	ldi	r31, 0x02	; 2
 80c:	80 81       	ld	r24, Z
 80e:	80 93 11 02 	sts	0x0211, r24
		device_type = copy_packet_data[1];
 812:	81 81       	ldd	r24, Z+1	; 0x01
 814:	80 93 10 02 	sts	0x0210, r24
		function_type = copy_packet_data[2];
 818:	82 81       	ldd	r24, Z+2	; 0x02
 81a:	80 93 0f 02 	sts	0x020F, r24
		param_count = copy_packet_data[3];
 81e:	83 81       	ldd	r24, Z+3	; 0x03
 820:	80 93 0e 02 	sts	0x020E, r24
		param_count_upper_nibbel = param_count & 0x10;
 824:	98 2f       	mov	r25, r24
 826:	90 71       	andi	r25, 0x10	; 16
 828:	90 93 4e 02 	sts	0x024E, r25
		param_count_lower_nibbel = (unsigned char)(param_count & 0x0F);
 82c:	8f 70       	andi	r24, 0x0F	; 15
 82e:	80 93 50 02 	sts	0x0250, r24
		
		if ((param_count & 0x10) == 0x10)
 832:	99 23       	and	r25, r25
 834:	81 f0       	breq	.+32     	; 0x856 <decode_data+0x58>
		{
			temp_1 = copy_packet_data[4];
 836:	24 81       	ldd	r18, Z+4	; 0x04
 838:	20 93 51 02 	sts	0x0251, r18
			temp_2 = copy_packet_data[5];
 83c:	85 81       	ldd	r24, Z+5	; 0x05
 83e:	80 93 4d 02 	sts	0x024D, r24
			
			param_1 = 256*temp_2 + temp_1;	
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	98 2f       	mov	r25, r24
 846:	88 27       	eor	r24, r24
 848:	82 0f       	add	r24, r18
 84a:	91 1d       	adc	r25, r1
 84c:	90 93 0d 02 	sts	0x020D, r25
 850:	80 93 0c 02 	sts	0x020C, r24
 854:	31 c0       	rjmp	.+98     	; 0x8b8 <decode_data+0xba>
		}
		
		else
		{
			switch (param_count_lower_nibbel)
 856:	82 30       	cpi	r24, 0x02	; 2
 858:	61 f0       	breq	.+24     	; 0x872 <decode_data+0x74>
 85a:	83 30       	cpi	r24, 0x03	; 3
 85c:	c9 f0       	breq	.+50     	; 0x890 <decode_data+0x92>
 85e:	81 30       	cpi	r24, 0x01	; 1
 860:	59 f5       	brne	.+86     	; 0x8b8 <decode_data+0xba>
			{
				case 1:
				param_1 = copy_packet_data[4];
 862:	80 91 1b 02 	lds	r24, 0x021B
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	90 93 0d 02 	sts	0x020D, r25
 86c:	80 93 0c 02 	sts	0x020C, r24
				break;
 870:	23 c0       	rjmp	.+70     	; 0x8b8 <decode_data+0xba>
				case 2:
				param_1 = copy_packet_data[4];
 872:	e7 e1       	ldi	r30, 0x17	; 23
 874:	f2 e0       	ldi	r31, 0x02	; 2
 876:	84 81       	ldd	r24, Z+4	; 0x04
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	90 93 0d 02 	sts	0x020D, r25
 87e:	80 93 0c 02 	sts	0x020C, r24
				param_2 = copy_packet_data[5];
 882:	85 81       	ldd	r24, Z+5	; 0x05
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	90 93 0b 02 	sts	0x020B, r25
 88a:	80 93 0a 02 	sts	0x020A, r24
				break;
 88e:	14 c0       	rjmp	.+40     	; 0x8b8 <decode_data+0xba>
				case 3:
				param_1 = copy_packet_data[4];
 890:	e7 e1       	ldi	r30, 0x17	; 23
 892:	f2 e0       	ldi	r31, 0x02	; 2
 894:	84 81       	ldd	r24, Z+4	; 0x04
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	90 93 0d 02 	sts	0x020D, r25
 89c:	80 93 0c 02 	sts	0x020C, r24
				param_2 = copy_packet_data[5];
 8a0:	85 81       	ldd	r24, Z+5	; 0x05
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	90 93 0b 02 	sts	0x020B, r25
 8a8:	80 93 0a 02 	sts	0x020A, r24
				param_3 = copy_packet_data[6];
 8ac:	86 81       	ldd	r24, Z+6	; 0x06
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	90 93 09 02 	sts	0x0209, r25
 8b4:	80 93 08 02 	sts	0x0208, r24
				break;
				default:
				break;
			}
		}
		data_copied = 0;
 8b8:	10 92 12 02 	sts	0x0212, r1
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <decode_data+0xc4>
	//	UDR2 = 'D';
	}
	
	if ((data_copied == 0) && (device_type == 0x00))	// input devices such as sensors, which will send back data
 8be:	81 11       	cpse	r24, r1
 8c0:	0a c0       	rjmp	.+20     	; 0x8d6 <decode_data+0xd8>
 8c2:	80 91 10 02 	lds	r24, 0x0210
 8c6:	81 11       	cpse	r24, r1
 8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <decode_data+0xd4>
	{
		send_sensor_data();
 8ca:	71 ce       	rjmp	.-798    	; 0x5ae <send_sensor_data>
 8cc:	08 95       	ret
	}
	
	else if ((data_copied == 0) && (device_type == 0x01)) // output devices such as buzzer, motors
	{
	//	UDR2 = 'A';
		actuate_devices();
 8ce:	05 cf       	rjmp	.-502    	; 0x6da <actuate_devices>
 8d0:	08 95       	ret
	if ((data_copied == 0) && (device_type == 0x00))	// input devices such as sensors, which will send back data
	{
		send_sensor_data();
	}
	
	else if ((data_copied == 0) && (device_type == 0x01)) // output devices such as buzzer, motors
 8d2:	81 30       	cpi	r24, 0x01	; 1
 8d4:	e1 f3       	breq	.-8      	; 0x8ce <decode_data+0xd0>
 8d6:	08 95       	ret

000008d8 <copy_data_packet>:
	}
}

void copy_data_packet()
{
	if (data_packet_received == 1)
 8d8:	80 91 13 02 	lds	r24, 0x0213
 8dc:	81 30       	cpi	r24, 0x01	; 1
 8de:	59 f4       	brne	.+22     	; 0x8f6 <copy_data_packet+0x1e>
		//{
			//copy_packet_data[j] = uart_data_buff[j];
			////UDR2 = copy_packet_data[j];
			//uart_data_buff[j] = 0;
		//}
		i=0;
 8e0:	10 92 15 02 	sts	0x0215, r1
		j=0;
 8e4:	10 92 14 02 	sts	0x0214, r1
		data_packet_received = 0;
 8e8:	10 92 13 02 	sts	0x0213, r1
		end_char_rec = 0;
 8ec:	10 92 16 02 	sts	0x0216, r1
		data_copied = 1;
 8f0:	80 93 12 02 	sts	0x0212, r24
		
	//	UDR2 = data_copied;
		decode_data();
 8f4:	84 cf       	rjmp	.-248    	; 0x7fe <decode_data>
 8f6:	08 95       	ret

000008f8 <main>:
}

//Main Function
int main(void)
{
	init_devices();
 8f8:	06 dd       	rcall	.-1524   	; 0x306 <init_devices>
	while(1)
	{
		copy_data_packet();
 8fa:	ee df       	rcall	.-36     	; 0x8d8 <copy_data_packet>
	}
 8fc:	fe cf       	rjmp	.-4      	; 0x8fa <main+0x2>

000008fe <__subsf3>:
 8fe:	50 58       	subi	r21, 0x80	; 128

00000900 <__addsf3>:
 900:	bb 27       	eor	r27, r27
 902:	aa 27       	eor	r26, r26
 904:	0e d0       	rcall	.+28     	; 0x922 <__addsf3x>
 906:	48 c1       	rjmp	.+656    	; 0xb98 <__fp_round>
 908:	39 d1       	rcall	.+626    	; 0xb7c <__fp_pscA>
 90a:	30 f0       	brcs	.+12     	; 0x918 <__addsf3+0x18>
 90c:	3e d1       	rcall	.+636    	; 0xb8a <__fp_pscB>
 90e:	20 f0       	brcs	.+8      	; 0x918 <__addsf3+0x18>
 910:	31 f4       	brne	.+12     	; 0x91e <__addsf3+0x1e>
 912:	9f 3f       	cpi	r25, 0xFF	; 255
 914:	11 f4       	brne	.+4      	; 0x91a <__addsf3+0x1a>
 916:	1e f4       	brtc	.+6      	; 0x91e <__addsf3+0x1e>
 918:	2e c1       	rjmp	.+604    	; 0xb76 <__fp_nan>
 91a:	0e f4       	brtc	.+2      	; 0x91e <__addsf3+0x1e>
 91c:	e0 95       	com	r30
 91e:	e7 fb       	bst	r30, 7
 920:	24 c1       	rjmp	.+584    	; 0xb6a <__fp_inf>

00000922 <__addsf3x>:
 922:	e9 2f       	mov	r30, r25
 924:	4a d1       	rcall	.+660    	; 0xbba <__fp_split3>
 926:	80 f3       	brcs	.-32     	; 0x908 <__addsf3+0x8>
 928:	ba 17       	cp	r27, r26
 92a:	62 07       	cpc	r22, r18
 92c:	73 07       	cpc	r23, r19
 92e:	84 07       	cpc	r24, r20
 930:	95 07       	cpc	r25, r21
 932:	18 f0       	brcs	.+6      	; 0x93a <__addsf3x+0x18>
 934:	71 f4       	brne	.+28     	; 0x952 <__addsf3x+0x30>
 936:	9e f5       	brtc	.+102    	; 0x99e <__addsf3x+0x7c>
 938:	62 c1       	rjmp	.+708    	; 0xbfe <__fp_zero>
 93a:	0e f4       	brtc	.+2      	; 0x93e <__addsf3x+0x1c>
 93c:	e0 95       	com	r30
 93e:	0b 2e       	mov	r0, r27
 940:	ba 2f       	mov	r27, r26
 942:	a0 2d       	mov	r26, r0
 944:	0b 01       	movw	r0, r22
 946:	b9 01       	movw	r22, r18
 948:	90 01       	movw	r18, r0
 94a:	0c 01       	movw	r0, r24
 94c:	ca 01       	movw	r24, r20
 94e:	a0 01       	movw	r20, r0
 950:	11 24       	eor	r1, r1
 952:	ff 27       	eor	r31, r31
 954:	59 1b       	sub	r21, r25
 956:	99 f0       	breq	.+38     	; 0x97e <__addsf3x+0x5c>
 958:	59 3f       	cpi	r21, 0xF9	; 249
 95a:	50 f4       	brcc	.+20     	; 0x970 <__addsf3x+0x4e>
 95c:	50 3e       	cpi	r21, 0xE0	; 224
 95e:	68 f1       	brcs	.+90     	; 0x9ba <__addsf3x+0x98>
 960:	1a 16       	cp	r1, r26
 962:	f0 40       	sbci	r31, 0x00	; 0
 964:	a2 2f       	mov	r26, r18
 966:	23 2f       	mov	r18, r19
 968:	34 2f       	mov	r19, r20
 96a:	44 27       	eor	r20, r20
 96c:	58 5f       	subi	r21, 0xF8	; 248
 96e:	f3 cf       	rjmp	.-26     	; 0x956 <__addsf3x+0x34>
 970:	46 95       	lsr	r20
 972:	37 95       	ror	r19
 974:	27 95       	ror	r18
 976:	a7 95       	ror	r26
 978:	f0 40       	sbci	r31, 0x00	; 0
 97a:	53 95       	inc	r21
 97c:	c9 f7       	brne	.-14     	; 0x970 <__addsf3x+0x4e>
 97e:	7e f4       	brtc	.+30     	; 0x99e <__addsf3x+0x7c>
 980:	1f 16       	cp	r1, r31
 982:	ba 0b       	sbc	r27, r26
 984:	62 0b       	sbc	r22, r18
 986:	73 0b       	sbc	r23, r19
 988:	84 0b       	sbc	r24, r20
 98a:	ba f0       	brmi	.+46     	; 0x9ba <__addsf3x+0x98>
 98c:	91 50       	subi	r25, 0x01	; 1
 98e:	a1 f0       	breq	.+40     	; 0x9b8 <__addsf3x+0x96>
 990:	ff 0f       	add	r31, r31
 992:	bb 1f       	adc	r27, r27
 994:	66 1f       	adc	r22, r22
 996:	77 1f       	adc	r23, r23
 998:	88 1f       	adc	r24, r24
 99a:	c2 f7       	brpl	.-16     	; 0x98c <__addsf3x+0x6a>
 99c:	0e c0       	rjmp	.+28     	; 0x9ba <__addsf3x+0x98>
 99e:	ba 0f       	add	r27, r26
 9a0:	62 1f       	adc	r22, r18
 9a2:	73 1f       	adc	r23, r19
 9a4:	84 1f       	adc	r24, r20
 9a6:	48 f4       	brcc	.+18     	; 0x9ba <__addsf3x+0x98>
 9a8:	87 95       	ror	r24
 9aa:	77 95       	ror	r23
 9ac:	67 95       	ror	r22
 9ae:	b7 95       	ror	r27
 9b0:	f7 95       	ror	r31
 9b2:	9e 3f       	cpi	r25, 0xFE	; 254
 9b4:	08 f0       	brcs	.+2      	; 0x9b8 <__addsf3x+0x96>
 9b6:	b3 cf       	rjmp	.-154    	; 0x91e <__addsf3+0x1e>
 9b8:	93 95       	inc	r25
 9ba:	88 0f       	add	r24, r24
 9bc:	08 f0       	brcs	.+2      	; 0x9c0 <__addsf3x+0x9e>
 9be:	99 27       	eor	r25, r25
 9c0:	ee 0f       	add	r30, r30
 9c2:	97 95       	ror	r25
 9c4:	87 95       	ror	r24
 9c6:	08 95       	ret

000009c8 <__divsf3>:
 9c8:	0c d0       	rcall	.+24     	; 0x9e2 <__divsf3x>
 9ca:	e6 c0       	rjmp	.+460    	; 0xb98 <__fp_round>
 9cc:	de d0       	rcall	.+444    	; 0xb8a <__fp_pscB>
 9ce:	40 f0       	brcs	.+16     	; 0x9e0 <__divsf3+0x18>
 9d0:	d5 d0       	rcall	.+426    	; 0xb7c <__fp_pscA>
 9d2:	30 f0       	brcs	.+12     	; 0x9e0 <__divsf3+0x18>
 9d4:	21 f4       	brne	.+8      	; 0x9de <__divsf3+0x16>
 9d6:	5f 3f       	cpi	r21, 0xFF	; 255
 9d8:	19 f0       	breq	.+6      	; 0x9e0 <__divsf3+0x18>
 9da:	c7 c0       	rjmp	.+398    	; 0xb6a <__fp_inf>
 9dc:	51 11       	cpse	r21, r1
 9de:	10 c1       	rjmp	.+544    	; 0xc00 <__fp_szero>
 9e0:	ca c0       	rjmp	.+404    	; 0xb76 <__fp_nan>

000009e2 <__divsf3x>:
 9e2:	eb d0       	rcall	.+470    	; 0xbba <__fp_split3>
 9e4:	98 f3       	brcs	.-26     	; 0x9cc <__divsf3+0x4>

000009e6 <__divsf3_pse>:
 9e6:	99 23       	and	r25, r25
 9e8:	c9 f3       	breq	.-14     	; 0x9dc <__divsf3+0x14>
 9ea:	55 23       	and	r21, r21
 9ec:	b1 f3       	breq	.-20     	; 0x9da <__divsf3+0x12>
 9ee:	95 1b       	sub	r25, r21
 9f0:	55 0b       	sbc	r21, r21
 9f2:	bb 27       	eor	r27, r27
 9f4:	aa 27       	eor	r26, r26
 9f6:	62 17       	cp	r22, r18
 9f8:	73 07       	cpc	r23, r19
 9fa:	84 07       	cpc	r24, r20
 9fc:	38 f0       	brcs	.+14     	; 0xa0c <__divsf3_pse+0x26>
 9fe:	9f 5f       	subi	r25, 0xFF	; 255
 a00:	5f 4f       	sbci	r21, 0xFF	; 255
 a02:	22 0f       	add	r18, r18
 a04:	33 1f       	adc	r19, r19
 a06:	44 1f       	adc	r20, r20
 a08:	aa 1f       	adc	r26, r26
 a0a:	a9 f3       	breq	.-22     	; 0x9f6 <__divsf3_pse+0x10>
 a0c:	33 d0       	rcall	.+102    	; 0xa74 <__divsf3_pse+0x8e>
 a0e:	0e 2e       	mov	r0, r30
 a10:	3a f0       	brmi	.+14     	; 0xa20 <__divsf3_pse+0x3a>
 a12:	e0 e8       	ldi	r30, 0x80	; 128
 a14:	30 d0       	rcall	.+96     	; 0xa76 <__divsf3_pse+0x90>
 a16:	91 50       	subi	r25, 0x01	; 1
 a18:	50 40       	sbci	r21, 0x00	; 0
 a1a:	e6 95       	lsr	r30
 a1c:	00 1c       	adc	r0, r0
 a1e:	ca f7       	brpl	.-14     	; 0xa12 <__divsf3_pse+0x2c>
 a20:	29 d0       	rcall	.+82     	; 0xa74 <__divsf3_pse+0x8e>
 a22:	fe 2f       	mov	r31, r30
 a24:	27 d0       	rcall	.+78     	; 0xa74 <__divsf3_pse+0x8e>
 a26:	66 0f       	add	r22, r22
 a28:	77 1f       	adc	r23, r23
 a2a:	88 1f       	adc	r24, r24
 a2c:	bb 1f       	adc	r27, r27
 a2e:	26 17       	cp	r18, r22
 a30:	37 07       	cpc	r19, r23
 a32:	48 07       	cpc	r20, r24
 a34:	ab 07       	cpc	r26, r27
 a36:	b0 e8       	ldi	r27, 0x80	; 128
 a38:	09 f0       	breq	.+2      	; 0xa3c <__divsf3_pse+0x56>
 a3a:	bb 0b       	sbc	r27, r27
 a3c:	80 2d       	mov	r24, r0
 a3e:	bf 01       	movw	r22, r30
 a40:	ff 27       	eor	r31, r31
 a42:	93 58       	subi	r25, 0x83	; 131
 a44:	5f 4f       	sbci	r21, 0xFF	; 255
 a46:	2a f0       	brmi	.+10     	; 0xa52 <__divsf3_pse+0x6c>
 a48:	9e 3f       	cpi	r25, 0xFE	; 254
 a4a:	51 05       	cpc	r21, r1
 a4c:	68 f0       	brcs	.+26     	; 0xa68 <__divsf3_pse+0x82>
 a4e:	8d c0       	rjmp	.+282    	; 0xb6a <__fp_inf>
 a50:	d7 c0       	rjmp	.+430    	; 0xc00 <__fp_szero>
 a52:	5f 3f       	cpi	r21, 0xFF	; 255
 a54:	ec f3       	brlt	.-6      	; 0xa50 <__divsf3_pse+0x6a>
 a56:	98 3e       	cpi	r25, 0xE8	; 232
 a58:	dc f3       	brlt	.-10     	; 0xa50 <__divsf3_pse+0x6a>
 a5a:	86 95       	lsr	r24
 a5c:	77 95       	ror	r23
 a5e:	67 95       	ror	r22
 a60:	b7 95       	ror	r27
 a62:	f7 95       	ror	r31
 a64:	9f 5f       	subi	r25, 0xFF	; 255
 a66:	c9 f7       	brne	.-14     	; 0xa5a <__divsf3_pse+0x74>
 a68:	88 0f       	add	r24, r24
 a6a:	91 1d       	adc	r25, r1
 a6c:	96 95       	lsr	r25
 a6e:	87 95       	ror	r24
 a70:	97 f9       	bld	r25, 7
 a72:	08 95       	ret
 a74:	e1 e0       	ldi	r30, 0x01	; 1
 a76:	66 0f       	add	r22, r22
 a78:	77 1f       	adc	r23, r23
 a7a:	88 1f       	adc	r24, r24
 a7c:	bb 1f       	adc	r27, r27
 a7e:	62 17       	cp	r22, r18
 a80:	73 07       	cpc	r23, r19
 a82:	84 07       	cpc	r24, r20
 a84:	ba 07       	cpc	r27, r26
 a86:	20 f0       	brcs	.+8      	; 0xa90 <__divsf3_pse+0xaa>
 a88:	62 1b       	sub	r22, r18
 a8a:	73 0b       	sbc	r23, r19
 a8c:	84 0b       	sbc	r24, r20
 a8e:	ba 0b       	sbc	r27, r26
 a90:	ee 1f       	adc	r30, r30
 a92:	88 f7       	brcc	.-30     	; 0xa76 <__divsf3_pse+0x90>
 a94:	e0 95       	com	r30
 a96:	08 95       	ret

00000a98 <__fixunssfsi>:
 a98:	98 d0       	rcall	.+304    	; 0xbca <__fp_splitA>
 a9a:	88 f0       	brcs	.+34     	; 0xabe <__fixunssfsi+0x26>
 a9c:	9f 57       	subi	r25, 0x7F	; 127
 a9e:	90 f0       	brcs	.+36     	; 0xac4 <__fixunssfsi+0x2c>
 aa0:	b9 2f       	mov	r27, r25
 aa2:	99 27       	eor	r25, r25
 aa4:	b7 51       	subi	r27, 0x17	; 23
 aa6:	a0 f0       	brcs	.+40     	; 0xad0 <__fixunssfsi+0x38>
 aa8:	d1 f0       	breq	.+52     	; 0xade <__fixunssfsi+0x46>
 aaa:	66 0f       	add	r22, r22
 aac:	77 1f       	adc	r23, r23
 aae:	88 1f       	adc	r24, r24
 ab0:	99 1f       	adc	r25, r25
 ab2:	1a f0       	brmi	.+6      	; 0xaba <__fixunssfsi+0x22>
 ab4:	ba 95       	dec	r27
 ab6:	c9 f7       	brne	.-14     	; 0xaaa <__fixunssfsi+0x12>
 ab8:	12 c0       	rjmp	.+36     	; 0xade <__fixunssfsi+0x46>
 aba:	b1 30       	cpi	r27, 0x01	; 1
 abc:	81 f0       	breq	.+32     	; 0xade <__fixunssfsi+0x46>
 abe:	9f d0       	rcall	.+318    	; 0xbfe <__fp_zero>
 ac0:	b1 e0       	ldi	r27, 0x01	; 1
 ac2:	08 95       	ret
 ac4:	9c c0       	rjmp	.+312    	; 0xbfe <__fp_zero>
 ac6:	67 2f       	mov	r22, r23
 ac8:	78 2f       	mov	r23, r24
 aca:	88 27       	eor	r24, r24
 acc:	b8 5f       	subi	r27, 0xF8	; 248
 ace:	39 f0       	breq	.+14     	; 0xade <__fixunssfsi+0x46>
 ad0:	b9 3f       	cpi	r27, 0xF9	; 249
 ad2:	cc f3       	brlt	.-14     	; 0xac6 <__fixunssfsi+0x2e>
 ad4:	86 95       	lsr	r24
 ad6:	77 95       	ror	r23
 ad8:	67 95       	ror	r22
 ada:	b3 95       	inc	r27
 adc:	d9 f7       	brne	.-10     	; 0xad4 <__fixunssfsi+0x3c>
 ade:	3e f4       	brtc	.+14     	; 0xaee <__fixunssfsi+0x56>
 ae0:	90 95       	com	r25
 ae2:	80 95       	com	r24
 ae4:	70 95       	com	r23
 ae6:	61 95       	neg	r22
 ae8:	7f 4f       	sbci	r23, 0xFF	; 255
 aea:	8f 4f       	sbci	r24, 0xFF	; 255
 aec:	9f 4f       	sbci	r25, 0xFF	; 255
 aee:	08 95       	ret

00000af0 <__floatunsisf>:
 af0:	e8 94       	clt
 af2:	09 c0       	rjmp	.+18     	; 0xb06 <__floatsisf+0x12>

00000af4 <__floatsisf>:
 af4:	97 fb       	bst	r25, 7
 af6:	3e f4       	brtc	.+14     	; 0xb06 <__floatsisf+0x12>
 af8:	90 95       	com	r25
 afa:	80 95       	com	r24
 afc:	70 95       	com	r23
 afe:	61 95       	neg	r22
 b00:	7f 4f       	sbci	r23, 0xFF	; 255
 b02:	8f 4f       	sbci	r24, 0xFF	; 255
 b04:	9f 4f       	sbci	r25, 0xFF	; 255
 b06:	99 23       	and	r25, r25
 b08:	a9 f0       	breq	.+42     	; 0xb34 <__floatsisf+0x40>
 b0a:	f9 2f       	mov	r31, r25
 b0c:	96 e9       	ldi	r25, 0x96	; 150
 b0e:	bb 27       	eor	r27, r27
 b10:	93 95       	inc	r25
 b12:	f6 95       	lsr	r31
 b14:	87 95       	ror	r24
 b16:	77 95       	ror	r23
 b18:	67 95       	ror	r22
 b1a:	b7 95       	ror	r27
 b1c:	f1 11       	cpse	r31, r1
 b1e:	f8 cf       	rjmp	.-16     	; 0xb10 <__floatsisf+0x1c>
 b20:	fa f4       	brpl	.+62     	; 0xb60 <__floatsisf+0x6c>
 b22:	bb 0f       	add	r27, r27
 b24:	11 f4       	brne	.+4      	; 0xb2a <__floatsisf+0x36>
 b26:	60 ff       	sbrs	r22, 0
 b28:	1b c0       	rjmp	.+54     	; 0xb60 <__floatsisf+0x6c>
 b2a:	6f 5f       	subi	r22, 0xFF	; 255
 b2c:	7f 4f       	sbci	r23, 0xFF	; 255
 b2e:	8f 4f       	sbci	r24, 0xFF	; 255
 b30:	9f 4f       	sbci	r25, 0xFF	; 255
 b32:	16 c0       	rjmp	.+44     	; 0xb60 <__floatsisf+0x6c>
 b34:	88 23       	and	r24, r24
 b36:	11 f0       	breq	.+4      	; 0xb3c <__floatsisf+0x48>
 b38:	96 e9       	ldi	r25, 0x96	; 150
 b3a:	11 c0       	rjmp	.+34     	; 0xb5e <__floatsisf+0x6a>
 b3c:	77 23       	and	r23, r23
 b3e:	21 f0       	breq	.+8      	; 0xb48 <__floatsisf+0x54>
 b40:	9e e8       	ldi	r25, 0x8E	; 142
 b42:	87 2f       	mov	r24, r23
 b44:	76 2f       	mov	r23, r22
 b46:	05 c0       	rjmp	.+10     	; 0xb52 <__floatsisf+0x5e>
 b48:	66 23       	and	r22, r22
 b4a:	71 f0       	breq	.+28     	; 0xb68 <__floatsisf+0x74>
 b4c:	96 e8       	ldi	r25, 0x86	; 134
 b4e:	86 2f       	mov	r24, r22
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	60 e0       	ldi	r22, 0x00	; 0
 b54:	2a f0       	brmi	.+10     	; 0xb60 <__floatsisf+0x6c>
 b56:	9a 95       	dec	r25
 b58:	66 0f       	add	r22, r22
 b5a:	77 1f       	adc	r23, r23
 b5c:	88 1f       	adc	r24, r24
 b5e:	da f7       	brpl	.-10     	; 0xb56 <__floatsisf+0x62>
 b60:	88 0f       	add	r24, r24
 b62:	96 95       	lsr	r25
 b64:	87 95       	ror	r24
 b66:	97 f9       	bld	r25, 7
 b68:	08 95       	ret

00000b6a <__fp_inf>:
 b6a:	97 f9       	bld	r25, 7
 b6c:	9f 67       	ori	r25, 0x7F	; 127
 b6e:	80 e8       	ldi	r24, 0x80	; 128
 b70:	70 e0       	ldi	r23, 0x00	; 0
 b72:	60 e0       	ldi	r22, 0x00	; 0
 b74:	08 95       	ret

00000b76 <__fp_nan>:
 b76:	9f ef       	ldi	r25, 0xFF	; 255
 b78:	80 ec       	ldi	r24, 0xC0	; 192
 b7a:	08 95       	ret

00000b7c <__fp_pscA>:
 b7c:	00 24       	eor	r0, r0
 b7e:	0a 94       	dec	r0
 b80:	16 16       	cp	r1, r22
 b82:	17 06       	cpc	r1, r23
 b84:	18 06       	cpc	r1, r24
 b86:	09 06       	cpc	r0, r25
 b88:	08 95       	ret

00000b8a <__fp_pscB>:
 b8a:	00 24       	eor	r0, r0
 b8c:	0a 94       	dec	r0
 b8e:	12 16       	cp	r1, r18
 b90:	13 06       	cpc	r1, r19
 b92:	14 06       	cpc	r1, r20
 b94:	05 06       	cpc	r0, r21
 b96:	08 95       	ret

00000b98 <__fp_round>:
 b98:	09 2e       	mov	r0, r25
 b9a:	03 94       	inc	r0
 b9c:	00 0c       	add	r0, r0
 b9e:	11 f4       	brne	.+4      	; 0xba4 <__fp_round+0xc>
 ba0:	88 23       	and	r24, r24
 ba2:	52 f0       	brmi	.+20     	; 0xbb8 <__fp_round+0x20>
 ba4:	bb 0f       	add	r27, r27
 ba6:	40 f4       	brcc	.+16     	; 0xbb8 <__fp_round+0x20>
 ba8:	bf 2b       	or	r27, r31
 baa:	11 f4       	brne	.+4      	; 0xbb0 <__fp_round+0x18>
 bac:	60 ff       	sbrs	r22, 0
 bae:	04 c0       	rjmp	.+8      	; 0xbb8 <__fp_round+0x20>
 bb0:	6f 5f       	subi	r22, 0xFF	; 255
 bb2:	7f 4f       	sbci	r23, 0xFF	; 255
 bb4:	8f 4f       	sbci	r24, 0xFF	; 255
 bb6:	9f 4f       	sbci	r25, 0xFF	; 255
 bb8:	08 95       	ret

00000bba <__fp_split3>:
 bba:	57 fd       	sbrc	r21, 7
 bbc:	90 58       	subi	r25, 0x80	; 128
 bbe:	44 0f       	add	r20, r20
 bc0:	55 1f       	adc	r21, r21
 bc2:	59 f0       	breq	.+22     	; 0xbda <__fp_splitA+0x10>
 bc4:	5f 3f       	cpi	r21, 0xFF	; 255
 bc6:	71 f0       	breq	.+28     	; 0xbe4 <__fp_splitA+0x1a>
 bc8:	47 95       	ror	r20

00000bca <__fp_splitA>:
 bca:	88 0f       	add	r24, r24
 bcc:	97 fb       	bst	r25, 7
 bce:	99 1f       	adc	r25, r25
 bd0:	61 f0       	breq	.+24     	; 0xbea <__fp_splitA+0x20>
 bd2:	9f 3f       	cpi	r25, 0xFF	; 255
 bd4:	79 f0       	breq	.+30     	; 0xbf4 <__fp_splitA+0x2a>
 bd6:	87 95       	ror	r24
 bd8:	08 95       	ret
 bda:	12 16       	cp	r1, r18
 bdc:	13 06       	cpc	r1, r19
 bde:	14 06       	cpc	r1, r20
 be0:	55 1f       	adc	r21, r21
 be2:	f2 cf       	rjmp	.-28     	; 0xbc8 <__fp_split3+0xe>
 be4:	46 95       	lsr	r20
 be6:	f1 df       	rcall	.-30     	; 0xbca <__fp_splitA>
 be8:	08 c0       	rjmp	.+16     	; 0xbfa <__fp_splitA+0x30>
 bea:	16 16       	cp	r1, r22
 bec:	17 06       	cpc	r1, r23
 bee:	18 06       	cpc	r1, r24
 bf0:	99 1f       	adc	r25, r25
 bf2:	f1 cf       	rjmp	.-30     	; 0xbd6 <__fp_splitA+0xc>
 bf4:	86 95       	lsr	r24
 bf6:	71 05       	cpc	r23, r1
 bf8:	61 05       	cpc	r22, r1
 bfa:	08 94       	sec
 bfc:	08 95       	ret

00000bfe <__fp_zero>:
 bfe:	e8 94       	clt

00000c00 <__fp_szero>:
 c00:	bb 27       	eor	r27, r27
 c02:	66 27       	eor	r22, r22
 c04:	77 27       	eor	r23, r23
 c06:	cb 01       	movw	r24, r22
 c08:	97 f9       	bld	r25, 7
 c0a:	08 95       	ret

00000c0c <_exit>:
 c0c:	f8 94       	cli

00000c0e <__stop_program>:
 c0e:	ff cf       	rjmp	.-2      	; 0xc0e <__stop_program>
